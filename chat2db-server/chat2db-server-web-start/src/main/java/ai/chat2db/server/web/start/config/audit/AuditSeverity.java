package ai.chat2db.server.web.start.config.audit;

/**
 * N√≠veis de Severidade para Eventos de Auditoria
 * Define a criticidade e urg√™ncia dos eventos auditados
 * 
 * @author Chat2DB Security Team
 * @version 1.0
 */
public enum AuditSeverity {
    
    /**
     * Informativo - Opera√ß√µes normais do sistema
     */
    INFO(0, "INFO", "Evento informativo - opera√ß√£o normal"),
    
    /**
     * Debug - Informa√ß√µes detalhadas para depura√ß√£o
     */
    DEBUG(1, "DEBUG", "Informa√ß√µes de debug e diagn√≥stico"),
    
    /**
     * Aviso - Situa√ß√µes que merecem aten√ß√£o
     */
    WARNING(2, "WARN", "Situa√ß√£o que merece aten√ß√£o"),
    
    /**
     * Erro - Problemas que afetam funcionalidade
     */
    ERROR(3, "ERROR", "Erro que afeta o funcionamento"),
    
    /**
     * Cr√≠tico - Problemas graves que requerem a√ß√£o imediata
     */
    CRITICAL(4, "CRITICAL", "Situa√ß√£o cr√≠tica que requer a√ß√£o imediata"),
    
    /**
     * Fatal - Falhas catastr√≥ficas do sistema
     */
    FATAL(5, "FATAL", "Falha catastr√≥fica do sistema");
    
    private final int level;
    private final String code;
    private final String description;
    
    AuditSeverity(int level, String code, String description) {
        this.level = level;
        this.code = code;
        this.description = description;
    }
    
    public int getLevel() {
        return level;
    }
    
    public String getCode() {
        return code;
    }
    
    public String getDescription() {
        return description;
    }
    
    /**
     * Verifica se a severidade requer notifica√ß√£o imediata
     */
    public boolean requiresImmediateNotification() {
        return level >= ERROR.level;
    }
    
    /**
     * Verifica se a severidade requer escala√ß√£o
     */
    public boolean requiresEscalation() {
        return level >= CRITICAL.level;
    }
    
    /**
     * Verifica se a severidade indica problema de seguran√ßa
     */
    public boolean isSecurityIssue() {
        return level >= WARNING.level;
    }
    
    /**
     * Obt√©m a cor associada √† severidade (para interfaces)
     */
    public String getColor() {
        return switch (this) {
            case DEBUG -> "#6c757d"; // Cinza
            case INFO -> "#17a2b8";  // Azul
            case WARNING -> "#ffc107"; // Amarelo
            case ERROR -> "#dc3545";   // Vermelho
            case CRITICAL -> "#e83e8c"; // Rosa
            case FATAL -> "#6f42c1";    // Roxo
        };
    }
    
    /**
     * Obt√©m o √≠cone associado √† severidade
     */
    public String getIcon() {
        return switch (this) {
            case DEBUG -> "üîç";
            case INFO -> "‚ÑπÔ∏è";
            case WARNING -> "‚ö†Ô∏è";
            case ERROR -> "‚ùå";
            case CRITICAL -> "üö®";
            case FATAL -> "üíÄ";
        };
    }
    
    /**
     * Obt√©m o tempo de resposta esperado em minutos
     */
    public int getResponseTimeMinutes() {
        return switch (this) {
            case DEBUG, INFO -> 0; // Sem tempo de resposta
            case WARNING -> 60;    // 1 hora
            case ERROR -> 30;      // 30 minutos
            case CRITICAL -> 15;   // 15 minutos
            case FATAL -> 5;       // 5 minutos
        };
    }
    
    /**
     * Verifica se deve ser inclu√≠do em relat√≥rios executivos
     */
    public boolean includeInExecutiveReports() {
        return level >= WARNING.level;
    }
    
    /**
     * Obt√©m a prioridade de processamento
     */
    public int getProcessingPriority() {
        return switch (this) {
            case FATAL -> 1;
            case CRITICAL -> 2;
            case ERROR -> 3;
            case WARNING -> 4;
            case INFO -> 5;
            case DEBUG -> 6;
        };
    }
    
    /**
     * Determina se deve acionar alertas autom√°ticos
     */
    public boolean shouldTriggerAlerts() {
        return level >= ERROR.level;
    }
    
    /**
     * Obt√©m o canal de notifica√ß√£o recomendado
     */
    public String getNotificationChannel() {
        return switch (this) {
            case DEBUG, INFO -> "log";
            case WARNING -> "email";
            case ERROR -> "email,slack";
            case CRITICAL -> "email,slack,sms";
            case FATAL -> "email,slack,sms,phone";
        };
    }
    
    /**
     * Compara severidades
     */
    public boolean isMoreSevereThan(AuditSeverity other) {
        return this.level > other.level;
    }
    
    /**
     * Compara severidades
     */
    public boolean isLessSevereThan(AuditSeverity other) {
        return this.level < other.level;
    }
    
    /**
     * Busca severidade por c√≥digo
     */
    public static AuditSeverity fromCode(String code) {
        for (AuditSeverity severity : values()) {
            if (severity.code.equalsIgnoreCase(code)) {
                return severity;
            }
        }
        throw new IllegalArgumentException("C√≥digo de severidade inv√°lido: " + code);
    }
    
    /**
     * Busca severidade por n√≠vel
     */
    public static AuditSeverity fromLevel(int level) {
        for (AuditSeverity severity : values()) {
            if (severity.level == level) {
                return severity;
            }
        }
        throw new IllegalArgumentException("N√≠vel de severidade inv√°lido: " + level);
    }
    
    /**
     * Obt√©m a severidade m√°xima entre duas
     */
    public static AuditSeverity max(AuditSeverity s1, AuditSeverity s2) {
        return s1.level > s2.level ? s1 : s2;
    }
    
    /**
     * Obt√©m a severidade m√≠nima entre duas
     */
    public static AuditSeverity min(AuditSeverity s1, AuditSeverity s2) {
        return s1.level < s2.level ? s1 : s2;
    }
    
    @Override
    public String toString() {
        return String.format("%s [%d]: %s", code, level, description);
    }
}